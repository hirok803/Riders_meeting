<%# <h1>Touring Route</h1> %>
<div class="touring_show">
  <div>
      <ul class="route_detail">
        <li class="user">
          <%= image_tag(@touring_route.user.avatar_url, width: 32, height:32) if @touring_route.user.avatar.present? %>
          <span><%= @touring_route.user.name %> </span>   
        </li>
        <li>
          <%= image_tag 'icon_desc.svg', width:32 %>
          <span><%= @touring_route.touring_desc %></span>
        </li>
        <li>
          <%= image_tag 'icon_calender.svg', width:32 %>
          <span><%= @touring_route.start_date.strftime('%Y/%m/%d') %></span>
        </li>
      </ul>
<%# コメント入力欄をドロワーとして出し入れ %>
      <div class="route_comment" id="comment_drawer">
        <input id="comment-input" type="checkbox" class="comment-unshown">
        <label id="comment-open" for="comment-input"><span></span></label>
        <label class="comment-unshown" id="comment-close" for="comment-input"></label>
       
        <div id="comment-content">
        <div class="route_comment_body">
          <% @comments.each do |comment| %>
            <% if comment.user == current_user%>
                <!–左からの吹き出し–>
                <div class="kaiwa">
                    <figure class="kaiwa-img-right">
                      <%# <img src="画像のURL" alt="no-img2″> %>
                    <%= image_tag(comment.user.avatar_url, width: 32) if comment.user.avatar.present? %>

                    <figcaption class="kaiwa-img-description">
                    <%# /////////名前//////////// %>
                    <strong><%= comment.user.name %></strong>

                    </figcaption>
                    </figure>
                    <div class="kaiwa-text-left">
                      <p class="kaiwa-text">
                        <%# /////////チャットの内容//////////// %>
                        <%= comment.comment %>
                      </p>
                    </div>
                </div>

            <% else %>
                <!–左からの吹き出し–>
                <div class="kaiwa">
                    <figure class="kaiwa-img-left">
                      <%# <img src="画像のURL" alt="no-img2″> %>
                    <%= image_tag(comment.user.avatar_url, width: 32) if comment.user.avatar.present? %>

                    <figcaption class="kaiwa-img-description">
                    <%# /////////名前//////////// %>
                    <strong><%= comment.user.name %></strong>

                    </figcaption>
                    </figure>
                    <div class="kaiwa-text-right">
                      <p class="kaiwa-text">
                        <%# /////////チャットの内容//////////// %>
                        <%= comment.comment %>
                      </p>
                    </div>
                </div>
            <% end %> 
          <% end %>
        </div> 
        <div>
            <% if user_signed_in? %>
              <%= render 'comments/form' , comment: @comment %>
            <% end %>
        </div>
      </div>
      <%# ドロワー出し入れ　：ここまで %>
    </div>
  </div>
  <div class="map" id="map_show" >
  </div>
</div>

<%
=begin%> 
<%= link_to 'Edit', edit_touring_route_path(@touring_route) %> |
<%= link_to 'Back', touring_routes_path %> |
<%= link_to 'Destroy', @touring_route, method: :delete, data: { confirm: 'Are you sure?' } %>
<%
=end%>

<script>
(async() => {
  // json を読み込む
  const res = await axios.get('/touring_routes/<%= @touring_route.id %>.json').catch(() => {
    console.error('データの取得に失敗')
    return null
  })

  $(function(){
    setTimeout(function(){
        //マップの初期化表示
       initMap_d(res)
    },50);
});

})()

function initMap_d(routes) {
    // ルート検索の条件

    let way_points = []
    if (routes.data.wp1_lat!== null) {
        let locations = {location: new google.maps.LatLng(routes.data.wp1_lat,routes.data.wp1_lon)}
        way_points.push(locations)
    }
    if (routes.data.wp2_lat !== null) {
        let locations = {location: new google.maps.LatLng(routes.data.wp2_lat,routes.data.wp2_lon)}
        way_points.push(locations)
    }
    if (routes.data.wp3_lat !== null) {
        let locations = {location: new google.maps.LatLng(routes.data.wp3_lat,routes.data.wp3_lon)}
        way_points.push(locations)
    }

    var request = {
        origin: new google.maps.LatLng(routes.data.start_lat,routes.data.start_lon), // 出発地
        destination: new google.maps.LatLng(routes.data.end_lat,routes.data.end_lon), // 目的地
        waypoints: way_points,  //経由地
        travelMode: google.maps.DirectionsTravelMode.DRIVING, // 交通手段(DRIVINGの場合は車)
    };

    // マップの中心計算
    let view_center_lat = (routes.data.start_lat + routes.data.end_lat) / 2
    let view_center_lon = (routes.data.start_lon + routes.data.end_lon) / 2


    

    // マップの生成
    var map = new google.maps.Map(document.getElementById("map_show"), {
        center: new google.maps.LatLng(view_center_lat,view_center_lon), // マップの中心
        zoom: 9, // ズームレベル
        styles:
        // [
        //   {
        //     "elementType": "geometry.fill",
        //     "stylers": [
        //       {
        //         "saturation": -80
        //       }
        //     ]
        //   }
        // ]
        [
    {
        "featureType": "all",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "weight": "2.00"
            }
        ]
    },
    {
        "featureType": "all",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#9c9c9c"
            }
        ]
    },
    {
        "featureType": "all",
        "elementType": "labels.text",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "all",
        "stylers": [
            {
                "color": "#f2f2f2"
            }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#ffffff"
            }
        ]
    },
    {
        "featureType": "landscape.man_made",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#ffffff"
            }
        ]
    },
    {
        "featureType": "poi",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "all",
        "stylers": [
            {
                "saturation": -100
            },
            {
                "lightness": 45
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#eeeeee"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "color": "#7b7b7b"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "labels.text.stroke",
        "stylers": [
            {
                "color": "#ffffff"
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "simplified"
            }
        ]
    },
    {
        "featureType": "road.arterial",
        "elementType": "labels.icon",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "transit",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "all",
        "stylers": [
            {
                "color": "#46bcec"
            },
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#c8d7d4"
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "color": "#070707"
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "labels.text.stroke",
        "stylers": [
            {
                "color": "#ffffff"
            }
        ]
    }
]
    });

    var d = new google.maps.DirectionsService(); // ルート検索オブジェクト
    var r = new google.maps.DirectionsRenderer({ // ルート描画オブジェクト
        map: map, // 描画先の地図
        preserveViewport: true, // 描画後に中心点をずらさない
    });
    // ルート検索
    d.route(request, function(result, status){
        // OKの場合ルート描画
        if (status == google.maps.DirectionsStatus.OK) {
            r.setDirections(result);
        }
    });
    //情報ウィンドウのインスタンスの生成
    var infoWindow = new google.maps.InfoWindow; 
    
    //ブラウザが Geolocation に対応しているかを判定
    //対応していない場合の処理
    if(!navigator.geolocation){ 
      //情報ウィンドウの位置をマップの中心位置に指定
      infoWindow.setPosition(map.getCenter());
      //情報ウィンドウのコンテンツを設定
      infoWindow.setContent('Geolocation に対応していません。');
      //情報ウィンドウを表示
      infoWindow.open(map);
    }
    
    //ブラウザが対応している場合、position にユーザーの位置情報が入る
    navigator.geolocation.getCurrentPosition(function(position) { 
      //position から緯度経度（ユーザーの位置）のオブジェクトを作成し変数に代入
      var pos = {  
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };

      var marker = new google.maps.Marker({
              map : map,             // 対象の地図オブジェクト
              position : pos,   // 緯度・経度
              icon: {
                url: '/icon_bike.svg',                      //アイコンのURL
                scaledSize: new google.maps.Size(40, 40) //サイズ
                }
            });

      // //情報ウィンドウに現在位置を指定
      // infoWindow.setPosition(pos);
      // //情報ウィンドウのコンテンツを設定
      // infoWindow.setContent('現在位置を取得しました。');
      // //情報ウィンドウを表示
      // infoWindow.open(map);
      //マップの中心位置を指定
      // map.setCenter(pos);
    
    }, function() {  //位置情報の取得をユーザーがブロックした場合のコールバック
      //情報ウィンドウの位置をマップの中心位置に指定
      infoWindow.setPosition(map.getCenter());
      //情報ウィンドウのコンテンツを設定
      infoWindow.setContent('Error: Geolocation が無効です。');
      //情報ウィンドウを表示
      infoWindow.open(map);
    });   

}
</script>
